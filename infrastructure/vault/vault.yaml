apiVersion: vault.banzaicloud.com/v1alpha1
kind: Vault
metadata:
  name: vault
  namespace: vault
spec:
  size: 1
  image: vault:1.11.3 # {"$imagepolicy": "flux-system:vault"}
  resources:
    # A YAML representation of resource ResourceRequirements for vault container
    # Detail can reference: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container
    vault:
      requests:
        memory: "128Mi"
        cpu: "20m"
      limits:
        memory: "256Mi"
        cpu: "100m"
    # A YAML representation of resource ResourceRequirements for bank-vaults container
    bankVaults:
      requests:
        memory: "32Mi"
        cpu: "10m"
      limits:
        memory: "128Mi"
        cpu: "50m"
    # A YAML representation of resource ResourceRequirements for prometheus-exporter container
    prometheusExporter:
      requests:
        memory: "16Mi"
        cpu: "10m"
      limits:
        memory: "32Mi"
        cpu: "50m"
  # Vault Pods , Services and TLS Secret annotations
  vaultAnnotations:
    type/instance: "vault"
  # Vault Configurer Pods and Services annotations
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"
  # Vault Pods , Services and TLS Secret labels
  vaultLabels:
    example.com/log-format: "json"
  # Vault Configurer Pods and Services labels
  vaultConfigurerLabels:
    example.com/log-format: "string"
  serviceAccount: vault
  serviceType: ClusterIP
  # Specify existing secret contains TLS certificate (accepted secret type: kubernetes.io/tls)
  # If it is set, generating certificate will be disabled
  # existingTlsSecretName: vault-tls
  volumes:
    - name: vault-file
      persistentVolumeClaim:
        claimName: vault-file
  volumeMounts:
    - name: vault-file
      mountPath: /vault/file
  # TODO: store unseal keys in DigitalOcean Spaces
  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
      # The storeRootToken flag enables storing of root token in chosen storage
      # This is true by default
      storeRootToken: true
    kubernetes:
      secretNamespace: vault
  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      file:
        path: "${ .Env.VAULT_STORAGE_FILE }" # An example how Vault config environment interpolation can be used
    listener:
      tcp:
        address: "0.0.0.0:8200"
        # Uncommenting the following line and deleting tls_cert_file and tls_key_file disables TLS
        tls_disable: true
    ui: true
  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the deploy/ and operator/deploy directories.
  externalConfig:
    purgeUnmanagedConfig:
      enabled: true
    policies:
      - name: allow_secrets
        rules: path "secret/*" { capabilities = ["create", "read", "update", "delete", "list"] }
      - name: allow_nextcloud
        rules: path "secret/data/nextcloud/*" { capabilities = ["read", "list"] } path "secret/data/redis" { capabilities = ["read", "list"] } path "secret/data/domain" { capabilities = ["read", "list"] }
      - name: allow_dbs
        rules: path "secret/data/redis" { capabilities = ["read", "list"] }
    auth:
      - type: kubernetes
        roles:
          # Allow the Nextcloud app to access the required secrets from Vault
          - name: nextcloud
            bound_service_account_names: ["nextcloud"]
            bound_service_account_namespaces: ["apps"]
            policies: ["allow_nextcloud"]
            ttl: 1h
          - name: redis
            bound_service_account_names: ["default"]
            bound_service_account_namespaces: ["database"]
            policies: ["allow_dbs"]
            ttl: 1h
          # TODO: validate whether this is needed 
          - name: secretsmutation
            bound_service_account_names:
              - vault-secrets-webhook
            bound_service_account_namespaces:
              - vault-secrets-webhook
            policies:
              - allow_secrets
            ttl: 1h
    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2
      - type: transit
        path: transit/kubernetes
        description: Transit engine for encrypting Kubernetes secrets (for Flux repositories)
        configuration:
          keys:
            - name: sops
              type: aes256-gcm96
              exportable: false
    # TODO: set up PostgreSQL DB backend for Nextcloud DB
  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: debug
    - name: VAULT_STORAGE_FILE
      value: "/vault/file"
    - name: VAULT_CACERT
      value: /vault/userconfig/vault-tls/ca.crt
  istioEnabled: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-file
  namespace: vault
spec:
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
  # storageClassName: ""
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: vault
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault
  namespace: vault
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "update", "patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault
  namespace: vault
roleRef:
  kind: Role
  name: vault
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: vault
    namespace: vault
---
# This binding allows the deployed Vault instance to authenticate clients
# through Kubernetes ServiceAccounts (if configured so).
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault
    namespace: vault
